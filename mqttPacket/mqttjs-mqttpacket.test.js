// these tests have been adapted from:
// https://github.com/mqttjs/mqtt-packet/blob/4690e25c66546579bad3a0783e6e7ef49d82e274/test.js

import test from "node:test";
import { decode, encode } from "./mod.ts";

function testParseGenerate(name, expected, buffer, opts) {
  const codecOpts = {
    protocolLevel: expected.protocolLevel || opts?.protocolVersion,
    maxIncomingPacketSize: 0xffff,
    maxOutgoingPacketSize: 0xffff,
  };

  test(`${name} parse`, (t) => {
    const fixture = buffer;
    const packet = decode(fixture, codecOpts);

    t.assert.deepStrictEqual(packet, expected);
  });

  test(`${name} generate`, (t) => {
    const generatedBuffer = encode(expected, codecOpts);
    if (generatedBuffer.length !== buffer.length && buffer.length < 200) {
      console.log(name, { generatedBuffer });
    }
    t.assert.equal(generatedBuffer.length, buffer.length);
  });
}

function testGenerateOnly(name, expected, buffer, opts) {
  const codecOpts = {
    protocolLevel: expected.protocolLevel || opts?.protocolVersion,
    maxIncomingPacketSize: 0xffff,
    maxOutgoingPacketSize: 0xffff,
  };

  test(name, (t) => {
    const encoded = encode(expected, codecOpts);
    t.assert.equal(encoded.length, buffer.length);
  });
}

function testParseError(expected, fixture, opts) {
  test(expected, (t) => {
    const codecOpts = {
      protocolLevel: opts?.protocolVersion || 4,
      maxIncomingPacketSize: 0xffff,
      maxOutgoingPacketSize: 0xffff,
    };

    t.assert.throws(() => decode(fixture, codecOpts), Error);
  });
}

function testGenerateError(expected, fixture, opts, name) {
  const codecOpts = {
    protocolLevel: opts?.protocolVersion || 4,
    maxIncomingPacketSize: 0xffff,
    maxOutgoingPacketSize: 0xffff,
  };
  test(name || expected, (t) => {
    t.assert.throws(() => encode(fixture, codecOpts), expected);
  });
}

function testGenerateErrorMultipleCmds(cmds, expected, fixture, opts) {
  cmds.forEach((cmd) => {
    const obj = Object.assign({}, fixture);
    obj.cmd = cmd;
    testGenerateError(expected, obj, opts, `${expected} on ${cmd}`);
  });
}

function testParseGenerateDefaults(name, object, buffer, _generated, opts) {
  //testParseOnly(`${name} parse`, generated, buffer, opts);
  testGenerateOnly(`${name} generate`, object, buffer, opts);
}

function testParseAndGenerate(name, object, buffer, opts) {
  //testParseOnly(`${name} parse`, object, buffer, opts);
  testGenerateOnly(`${name} generate`, object, buffer, opts);
}

testGenerateError("Unknown command", {});

testParseError("Not supported", Uint8Array.from([0, 1, 0]), {});

testParseError(
  "Invalid variable byte integer",
  Uint8Array.from([16, 255, 255, 255, 255]),
  {},
);

testParseError(
  "Invalid variable byte integer",
  Uint8Array.from([16, 255, 255, 255, 128]),
  {},
);

testParseError(
  "Invalid variable byte integer",
  Uint8Array.from([16, 255, 255, 255, 255, 1]),
  {},
);

testParseError(
  "Invalid variable byte integer",
  Uint8Array.from([16, 255, 255, 255, 255, 127]),
  {},
);

testParseError(
  "Invalid variable byte integer",
  Uint8Array.from([16, 255, 255, 255, 255, 128]),
  {},
);

testParseError(
  "Invalid variable byte integer",
  Uint8Array.from([16, 255, 255, 255, 255, 255, 1]),
  {},
);

testParseGenerate(
  "minimal connect",
  {
    clean: false,
    clientId: "test",
    type: 1,
    keepAlive: 30,
    protocolName: "MQIsdp",
    protocolLevel: 3,
    username: undefined,
    password: undefined,
    will: undefined,
  },
  Uint8Array.from([
    16,
    18,
    0,
    6,
    77,
    81,
    73,
    115,
    100,
    112,
    3,
    0,
    0,
    30,
    0,
    4,
    116,
    101,
    115,
    116,
  ]),
  undefined,
);

// test has been modified,Opifex requires clientID to be a string
testGenerateOnly(
  "minimal connect with clientId as Buffer",
  {
    clean: false,
    clientId: "test", // Uint8Array.from([116, 101, 115, 116])
    type: 1,
    keepAlive: 30,
    protocolName: "MQIsdp",
    protocolLevel: 3,
  },
  Uint8Array.from([
    16,
    18,
    0,
    6,
    77,
    81,
    73,
    115,
    100,
    112,
    3,
    0,
    0,
    30,
    0,
    4,
    116,
    101,
    115,
    116,
  ]),
  undefined,
);

testParseGenerate(
  "connect MQTT bridge 131",
  {
    type: 1,
    protocolName: "MQIsdp",
    protocolLevel: 3,
    bridgeMode: true,
    clean: false,
    keepAlive: 30,
    clientId: "test",
    username: undefined,
    password: undefined,
    will: undefined,
  },
  Uint8Array.from([
    16,
    18, // Header
    0,
    6, // Protocol ID length
    77,
    81,
    73,
    115,
    100,
    112, // Protocol ID
    131, // Protocol version
    0, // Connect flags
    0,
    30, // Keepalive
    0,
    4, // Client ID length
    116,
    101,
    115,
    116, // Client ID
  ]),
);

testParseGenerate(
  "connect MQTT bridge 132",
  {
    type: 1,
    protocolName: "MQTT",
    protocolLevel: 4,
    bridgeMode: true,
    clean: false,
    keepAlive: 30,
    clientId: "test",
    username: undefined,
    password: undefined,
    will: undefined,
  },
  Uint8Array.from([
    16,
    18, // Header
    0,
    4,
    77,
    81,
    84,
    84, // Protocol ID
    132, // Protocol version
    0, // Connect flags
    0,
    30, // Keepalive
    0,
    4, // Client ID length
    116,
    101,
    115,
    116, // Client ID
  ]),
);

testParseGenerate(
  "connect MQTT 5",
  {
    will: {
      retain: true,
      qos: 2,
      properties: {
        willDelayInterval: 1234,
        payloadFormatIndicator: false,
        messageExpiryInterval: 4321,
        contentType: "test",
        responseTopic: "topic",
        correlationData: Uint8Array.from([1, 2, 3, 4]),
        userProperty: [["test", "test"]],
      },
      topic: "topic",
      payload: Uint8Array.from([4, 3, 2, 1]),
    },
    clean: true,
    properties: {
      sessionExpiryInterval: 1234,
      receiveMaximum: 432,
      maximumPacketSize: 100,
      topicAliasMaximum: 456,
      requestResponseInformation: true,
      requestProblemInformation: true,
      authenticationMethod: "test",
      authenticationData: Uint8Array.from([1, 2, 3, 4]),
      userProperty: [["test", "test"]],
    },
    clientId: "test",
    type: 1,
    keepAlive: 30,
    protocolName: "MQTT",
    protocolLevel: 5,
    username: undefined,
    password: undefined,
  },
  Uint8Array.from([
    16,
    125,
    0,
    4,
    77,
    81,
    84,
    84,
    5,
    54,
    0,
    30,
    47,
    17,
    0,
    0,
    4,
    210,
    33,
    1,
    176,
    39,
    0,
    0,
    0,
    100,
    34,
    1,
    200,
    25,
    1,
    23,
    1,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
    21,
    0,
    4,
    116,
    101,
    115,
    116,
    22,
    0,
    4,
    1,
    2,
    3,
    4,
    0,
    4,
    116,
    101,
    115,
    116,
    47,
    24,
    0,
    0,
    4,
    210,
    1,
    0,
    2,
    0,
    0,
    16,
    225,
    3,
    0,
    4,
    116,
    101,
    115,
    116,
    8,
    0,
    5,
    116,
    111,
    112,
    105,
    99,
    9,
    0,
    4,
    1,
    2,
    3,
    4,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    5,
    116,
    111,
    112,
    105,
    99,
    0,
    4,
    4,
    3,
    2,
    1,
  ]),
  undefined,
);

testParseGenerate(
  "connect MQTT 5 with will properties but with empty will payload",
  {
    will: {
      retain: true,
      qos: 2,
      properties: {
        willDelayInterval: 1234,
        payloadFormatIndicator: false,
        messageExpiryInterval: 4321,
        contentType: "test",
        responseTopic: "topic",
        correlationData: Uint8Array.from([1, 2, 3, 4]),
        userProperty: [["test", "test"]],
      },
      topic: "topic",
      payload: Uint8Array.from([]),
    },
    clean: true,
    properties: {
      sessionExpiryInterval: 1234,
      receiveMaximum: 432,
      maximumPacketSize: 100,
      topicAliasMaximum: 456,
      requestResponseInformation: true,
      requestProblemInformation: true,
      authenticationMethod: "test",
      authenticationData: Uint8Array.from([1, 2, 3, 4]),
      userProperty: [["test", "test"]],
    },
    clientId: "test",
    type: 1,
    keepAlive: 30,
    protocolName: "MQTT",
    protocolLevel: 5,
    username: undefined,
    password: undefined,
  },
  Uint8Array.from([
    16,
    121,
    0,
    4,
    77,
    81,
    84,
    84,
    5,
    54,
    0,
    30,
    47,
    17,
    0,
    0,
    4,
    210,
    33,
    1,
    176,
    39,
    0,
    0,
    0,
    100,
    34,
    1,
    200,
    25,
    1,
    23,
    1,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
    21,
    0,
    4,
    116,
    101,
    115,
    116,
    22,
    0,
    4,
    1,
    2,
    3,
    4,
    0,
    4,
    116,
    101,
    115,
    116,
    47,
    24,
    0,
    0,
    4,
    210,
    1,
    0,
    2,
    0,
    0,
    16,
    225,
    3,
    0,
    4,
    116,
    101,
    115,
    116,
    8,
    0,
    5,
    116,
    111,
    112,
    105,
    99,
    9,
    0,
    4,
    1,
    2,
    3,
    4,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    5,
    116,
    111,
    112,
    105,
    99,
    0,
    0,
  ]),
  undefined,
);

testParseGenerate(
  "connect MQTT 5 w/o will properties",
  {
    will: {
      retain: true,
      qos: 2,
      topic: "topic",
      payload: Uint8Array.from([4, 3, 2, 1]),
      properties: {},
    },
    clean: true,
    properties: {
      sessionExpiryInterval: 1234,
      receiveMaximum: 432,
      maximumPacketSize: 100,
      topicAliasMaximum: 456,
      requestResponseInformation: true,
      requestProblemInformation: true,
      authenticationMethod: "test",
      authenticationData: Uint8Array.from([1, 2, 3, 4]),
      userProperty: [["test", "test"]],
    },
    clientId: "test",
    type: 1,
    keepAlive: 30,
    protocolName: "MQTT",
    protocolLevel: 5,
    username: undefined,
    password: undefined,
  },
  Uint8Array.from([
    16,
    78,
    0,
    4,
    77,
    81,
    84,
    84,
    5,
    54,
    0,
    30,
    47,
    17,
    0,
    0,
    4,
    210,
    33,
    1,
    176,
    39,
    0,
    0,
    0,
    100,
    34,
    1,
    200,
    25,
    1,
    23,
    1,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
    21,
    0,
    4,
    116,
    101,
    115,
    116,
    22,
    0,
    4,
    1,
    2,
    3,
    4,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    0,
    5,
    116,
    111,
    112,
    105,
    99,
    0,
    4,
    4,
    3,
    2,
    1,
  ]),
  undefined,
);

testParseGenerate(
  "no clientId with 3.1.1",
  {
    clean: true,
    clientId: "",
    type: 1,
    keepAlive: 30,
    protocolName: "MQTT",
    protocolLevel: 4,
    username: undefined,
    password: undefined,
    will: undefined,
  },
  Uint8Array.from([16, 12, 0, 4, 77, 81, 84, 84, 4, 2, 0, 30, 0, 0]),
  undefined,
);

testParseGenerateDefaults(
  "no clientId with 5.0",
  {
    type: 1,
    protocolName: "MQTT",
    protocolLevel: 5,
    clean: true,
    keepAlive: 60,
    properties: { receiveMaximum: 20 },
    clientId: "",
  },
  Uint8Array.from([
    16,
    16,
    0,
    4,
    77,
    81,
    84,
    84,
    5,
    2,
    0,
    60,
    3,
    33,
    0,
    20,
    0,
    0,
  ]),
  {
    cmd: "connect",
    retain: false,
    qos: 0,
    dup: false,
    length: 16,
    topic: null,
    payload: null,
    protocolId: "MQTT",
    protocolVersion: 5,
    clean: true,
    keepalive: 60,
    properties: { receiveMaximum: 20 },
    clientId: "",
  },
  { protocolVersion: 5 },
);

testParseGenerateDefaults(
  "utf-8 clientId with 5.0",
  {
    type: 1,
    retain: false,
    qos: 0,
    dup: false,
    length: 23,
    protocolName: "MQTT",
    protocolLevel: 4,
    clean: true,
    keepAlive: 30,
    clientId: "Ŧėśt🜄",
  },
  Uint8Array.from([
    16,
    23,
    0,
    4,
    77,
    81,
    84,
    84,
    4,
    2,
    0,
    30,
    0,
    11,
    197,
    166,
    196,
    151,
    197,
    155,
    116,
    240,
    159,
    156,
    132,
  ]),
  {
    cmd: "connect",
    retain: false,
    qos: 0,
    dup: false,
    length: 23,
    topic: null,
    payload: null,
    protocolId: "MQTT",
    protocolVersion: 4,
    clean: true,
    keepalive: 30,
    clientId: "Ŧėśt🜄",
  },
  { protocol: 5 },
);

testParseGenerateDefaults(
  "default connect",
  { type: 1, protocolLevel: 4, clientId: "test" },
  Uint8Array.from([
    16,
    16,
    0,
    4,
    77,
    81,
    84,
    84,
    4,
    2,
    0,
    0,
    0,
    4,
    116,
    101,
    115,
    116,
  ]),
  {
    cmd: "connect",
    retain: false,
    qos: 0,
    dup: false,
    length: 16,
    topic: null,
    payload: null,
    protocolId: "MQTT",
    protocolVersion: 4,
    clean: true,
    keepalive: 0,
    clientId: "test",
  },
  undefined,
);

testParseAndGenerate(
  "Version 4 CONACK",
  {
    topic: null,
    payload: null,
    sessionPresent: false,
    returnCode: 1,
    type: 2,
    protocolLevel: 4,
  },
  Uint8Array.from([32, 2, 0, 1]),
  {},
);

testParseAndGenerate(
  "Version 5 CONACK",
  {
    topic: null,
    payload: null,
    sessionPresent: false,
    reasonCode: 140,
    type: 2,
    protocolLevel: 5,
    properties: {},
  },
  Uint8Array.from([32, 3, 0, 140, 0]),
  { protocolVersion: 5 },
);

testParseAndGenerate(
  "Version 5 PUBACK test 2",
  {
    topic: null,
    payload: null,
    reasonCode: 0,
    type: 4,
    id: 42,
    protocolLevel: 5,
  },
  Uint8Array.from([64, 2, 0, 42]),
  { protocolVersion: 5 },
);

testParseAndGenerate(
  "Version 5 CONNACK test 3",
  {
    topic: null,
    payload: null,
    sessionPresent: true,
    reasonCode: 0,
    type: 2,
    protocolLevel: 5,
    properties: {},
  },
  Uint8Array.from([32, 3, 1, 0, 0]),
  { protocolVersion: 5 },
);

testParseAndGenerate(
  "Version 5 DISCONNECT test 3",
  {
    topic: null,
    payload: null,
    reasonCode: 0,
    type: 14,
    protocolLevel: 5,
  },
  Uint8Array.from([224, 0]),
  { protocolVersion: 5 },
);

testParseGenerate(
  "empty will payload",
  {
    will: {
      retain: true,
      qos: 2,
      topic: "topic",
      payload: Uint8Array.from([]),
    },
    clean: true,
    clientId: "test",
    username: "username",
    password: Uint8Array.from([112, 97, 115, 115, 119, 111, 114, 100]),
    type: 1,
    keepAlive: 30,
    protocolName: "MQIsdp",
    protocolLevel: 3,
  },
  Uint8Array.from([
    16,
    47,
    0,
    6,
    77,
    81,
    73,
    115,
    100,
    112,
    3,
    246,
    0,
    30,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    5,
    116,
    111,
    112,
    105,
    99,
    0,
    0,
    0,
    8,
    117,
    115,
    101,
    114,
    110,
    97,
    109,
    101,
    0,
    8,
    112,
    97,
    115,
    115,
    119,
    111,
    114,
    100,
  ]),
  undefined,
);

testParseGenerate(
  "empty buffer username payload",
  {
    clean: true,
    clientId: "test",
    username: "",
    type: 1,
    keepAlive: 30,
    protocolName: "MQIsdp",
    protocolLevel: 3,
    password: undefined,
    will: undefined,
  },
  Uint8Array.from([
    16,
    20,
    0,
    6,
    77,
    81,
    73,
    115,
    100,
    112,
    3,
    130,
    0,
    30,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    0,
  ]),
  undefined,
);

testParseGenerate(
  "empty string username payload",
  {
    clean: true,
    clientId: "test",
    username: "",
    type: 1,
    keepAlive: 30,
    protocolName: "MQIsdp",
    protocolLevel: 3,
    password: undefined,
    will: undefined,
  },
  Uint8Array.from([
    16,
    20,
    0,
    6,
    77,
    81,
    73,
    115,
    100,
    112,
    3,
    130,
    0,
    30,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    0,
  ]),
  undefined,
);

testParseGenerate(
  "empty buffer password payload",
  {
    clean: true,
    clientId: "test",
    username: "username",
    password: Uint8Array.from([]),
    type: 1,
    keepAlive: 30,
    protocolName: "MQIsdp",
    protocolLevel: 3,
    will: undefined,
  },
  Uint8Array.from([
    16,
    30,
    0,
    6,
    77,
    81,
    73,
    115,
    100,
    112,
    3,
    194,
    0,
    30,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    8,
    117,
    115,
    101,
    114,
    110,
    97,
    109,
    101,
    0,
    0,
  ]),
  undefined,
);

testParseGenerate(
  "empty string password payload",
  {
    clean: true,
    clientId: "test",
    username: "username",
    password: Uint8Array.from([]),
    type: 1,
    keepAlive: 30,
    protocolName: "MQIsdp",
    protocolLevel: 3,
    will: undefined,
  },
  Uint8Array.from([
    16,
    30,
    0,
    6,
    77,
    81,
    73,
    115,
    100,
    112,
    3,
    194,
    0,
    30,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    8,
    117,
    115,
    101,
    114,
    110,
    97,
    109,
    101,
    0,
    0,
  ]),
  undefined,
);

testParseGenerate(
  "empty string username and password payload",
  {
    clean: true,
    clientId: "test",
    username: "",
    password: Uint8Array.from([]),
    type: 1,
    keepAlive: 30,
    protocolName: "MQIsdp",
    protocolLevel: 3,
    will: undefined,
  },
  Uint8Array.from([
    16,
    22,
    0,
    6,
    77,
    81,
    73,
    115,
    100,
    112,
    3,
    194,
    0,
    30,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    0,
    0,
    0,
  ]),
  undefined,
);

testParseGenerate(
  "maximal connect",
  {
    will: {
      retain: true,
      qos: 2,
      topic: "topic",
      payload: Uint8Array.from([112, 97, 121, 108, 111, 97, 100]),
    },
    clean: true,
    clientId: "test",
    username: "username",
    password: Uint8Array.from([112, 97, 115, 115, 119, 111, 114, 100]),
    type: 1,
    keepAlive: 30,
    protocolName: "MQIsdp",
    protocolLevel: 3,
  },
  Uint8Array.from([
    16,
    54,
    0,
    6,
    77,
    81,
    73,
    115,
    100,
    112,
    3,
    246,
    0,
    30,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    5,
    116,
    111,
    112,
    105,
    99,
    0,
    7,
    112,
    97,
    121,
    108,
    111,
    97,
    100,
    0,
    8,
    117,
    115,
    101,
    114,
    110,
    97,
    109,
    101,
    0,
    8,
    112,
    97,
    115,
    115,
    119,
    111,
    114,
    100,
  ]),
  undefined,
);

testParseGenerate(
  "max connect with special chars",
  {
    will: {
      retain: true,
      qos: 2,
      topic: "tòpic",
      payload: Uint8Array.from([112, 97, 121, 194, 163, 111, 97, 100]),
    },
    clean: true,
    clientId: "te$t",
    username: "u$ern4me",
    password: Uint8Array.from([112, 52, 36, 36, 119, 48, 194, 163, 100]),
    type: 1,
    keepAlive: 30,
    protocolName: "MQIsdp",
    protocolLevel: 3,
  },
  Uint8Array.from([
    16,
    57,
    0,
    6,
    77,
    81,
    73,
    115,
    100,
    112,
    3,
    246,
    0,
    30,
    0,
    4,
    116,
    101,
    36,
    116,
    0,
    6,
    116,
    195,
    178,
    112,
    105,
    99,
    0,
    8,
    112,
    97,
    121,
    194,
    163,
    111,
    97,
    100,
    0,
    8,
    117,
    36,
    101,
    114,
    110,
    52,
    109,
    101,
    0,
    9,
    112,
    52,
    36,
    36,
    119,
    48,
    194,
    163,
    100,
  ]),
  undefined,
);

testGenerateOnly(
  "connect all strings generate",
  {
    will: {
      retain: true,
      qos: 2,
      topic: "topic",
      payload: "payload",
    },
    clean: true,
    clientId: "test",
    username: "username",
    password: Uint8Array.from([112, 97, 115, 115, 119, 111, 114, 100]),
    type: 1,
    keepAlive: 30,
    protocolName: "MQIsdp",
    protocolLevel: 3,
  },
  Uint8Array.from([
    16,
    54,
    0,
    6,
    77,
    81,
    73,
    115,
    100,
    112,
    3,
    246,
    0,
    30,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    5,
    116,
    111,
    112,
    105,
    99,
    0,
    7,
    112,
    97,
    121,
    108,
    111,
    97,
    100,
    0,
    8,
    117,
    115,
    101,
    114,
    110,
    97,
    109,
    101,
    0,
    8,
    112,
    97,
    115,
    115,
    119,
    111,
    114,
    100,
  ]),
  undefined,
);

testParseError(
  "Cannot parse protocolId",
  Uint8Array.from([16, 4, 0, 6, 77, 81]),
  undefined,
);

testParseError(
  "Packet too short",
  Uint8Array.from([16, 8, 0, 6, 77, 81, 73, 115, 100, 112]),
  undefined,
);

testParseError(
  "Packet too short",
  Uint8Array.from([16, 10, 0, 6, 77, 81, 73, 115, 100, 112, 3, 246]),
  undefined,
);

testParseError(
  "Packet too short",
  Uint8Array.from([16, 10, 0, 6, 77, 81, 73, 115, 100, 112, 3, 246, 0, 30]),
  undefined,
);

testParseError(
  "Cannot parse will topic",
  Uint8Array.from([
    16,
    16,
    0,
    6,
    77,
    81,
    73,
    115,
    100,
    112,
    3,
    246,
    0,
    30,
    0,
    2,
    0,
    0,
  ]),
  undefined,
);

testParseError(
  "Cannot parse will payload",
  Uint8Array.from([
    16,
    23,
    0,
    6,
    77,
    81,
    73,
    115,
    100,
    112,
    3,
    246,
    0,
    30,
    0,
    5,
    116,
    111,
    112,
    105,
    99,
    0,
    2,
    0,
    0,
  ]),
  undefined,
);

testParseError(
  "Cannot parse username",
  Uint8Array.from([
    16,
    32,
    0,
    6,
    77,
    81,
    73,
    115,
    100,
    112,
    3,
    246,
    0,
    30,
    0,
    5,
    116,
    111,
    112,
    105,
    99,
    0,
    7,
    112,
    97,
    121,
    108,
    111,
    97,
    100,
    0,
    2,
    0,
    0,
  ]),
  undefined,
);

testParseError(
  "Cannot parse password",
  Uint8Array.from([
    16,
    42,
    0,
    6,
    77,
    81,
    73,
    115,
    100,
    112,
    3,
    246,
    0,
    30,
    0,
    5,
    116,
    111,
    112,
    105,
    99,
    0,
    7,
    112,
    97,
    121,
    108,
    111,
    97,
    100,
    0,
    8,
    117,
    115,
    101,
    114,
    110,
    97,
    109,
    101,
    0,
    2,
    0,
    0,
  ]),
  undefined,
);

testParseError(
  "Invalid header flag bits, must be 0x0 for connect packet",
  Uint8Array.from([18, 10, 0, 4, 77, 81, 84, 84, 3, 2, 0, 30]),
  undefined,
);

testParseError(
  "Connect flag bit 0 must be 0, but got 1",
  Uint8Array.from([16, 10, 0, 4, 77, 81, 84, 84, 3, 3, 0, 30]),
  undefined,
);

testParseError(
  "Will Retain Flag must be set to zero when Will Flag is set to 0",
  Uint8Array.from([16, 10, 0, 4, 77, 81, 84, 84, 3, 34, 0, 30]),
  undefined,
);

testParseError(
  "Will QoS must be set to zero when Will Flag is set to 0",
  Uint8Array.from([16, 10, 0, 4, 77, 81, 84, 84, 3, 18, 0, 30]),
  undefined,
);

testParseError(
  "Will QoS must be set to zero when Will Flag is set to 0",
  Uint8Array.from([16, 10, 0, 4, 77, 81, 84, 84, 3, 10, 0, 30]),
  undefined,
);

testParseError(
  "Packet too short",
  Uint8Array.from([16, 8, 0, 4, 77, 81, 84, 84, 5, 2, 0, 0, 0, 0, 0]),
  { protocolVersion: 5 },
);

testParseError(
  "Malformed subscribe, no payload specified",
  Uint8Array.from([130, 0]),
  { protocolVersion: 5 },
);

testParseError(
  "Malformed suback, no payload specified",
  Uint8Array.from([144, 0]),
  { protocolVersion: 5 },
);

testParseError(
  "Malformed unsubscribe, no payload specified",
  Uint8Array.from([162, 0]),
  { protocolVersion: 5 },
);

testParseError(
  "Malformed unsuback, no payload specified",
  Uint8Array.from([176, 0]),
  { protocolVersion: 5 },
);

testParseError(
  "Malformed unsuback, payload length must be 2",
  Uint8Array.from([176, 1, 1]),
  { protocolVersion: 4 },
);

testParseError(
  "Malformed unsuback, payload length must be 2",
  Uint8Array.from([176, 1, 1]),
  { protocolVersion: 3 },
);

testParseGenerate(
  "connack with return code 0",
  { sessionPresent: false, returnCode: 0, type: 2, protocolLevel: 4 },
  Uint8Array.from([32, 2, 0, 0]),
  undefined,
);

testParseGenerate(
  "connack MQTT 5 with properties",
  {
    sessionPresent: false,
    reasonCode: 0,
    properties: {
      sessionExpiryInterval: 1234,
      receiveMaximum: 432,
      retainAvailable: true,
      maximumPacketSize: 100,
      assignedClientIdentifier: "test",
      topicAliasMaximum: 456,
      reasonString: "test",
      wildcardSubscriptionAvailable: true,
      sharedSubscriptionAvailable: false,
      serverKeepAlive: 1234,
      responseInformation: "test",
      serverReference: "test",
      authenticationMethod: "test",
      authenticationData: Uint8Array.from([1, 2, 3, 4]),
      userProperty: [["test", "test"]],
      maximumQos: 2,
      subscriptionIdentifierAvailable: true,
    },
    type: 2,
    protocolLevel: 5,
  },
  Uint8Array.from([
    32,
    87,
    0,
    0,
    84,
    17,
    0,
    0,
    4,
    210,
    33,
    1,
    176,
    36,
    2,
    37,
    1,
    39,
    0,
    0,
    0,
    100,
    18,
    0,
    4,
    116,
    101,
    115,
    116,
    34,
    1,
    200,
    31,
    0,
    4,
    116,
    101,
    115,
    116,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
    40,
    1,
    41,
    1,
    42,
    0,
    19,
    4,
    210,
    26,
    0,
    4,
    116,
    101,
    115,
    116,
    28,
    0,
    4,
    116,
    101,
    115,
    116,
    21,
    0,
    4,
    116,
    101,
    115,
    116,
    22,
    0,
    4,
    1,
    2,
    3,
    4,
  ]),
  { protocolVersion: 5 },
);

testParseGenerate(
  "connack MQTT 5 with properties and doubled user properties",
  {
    sessionPresent: false,
    reasonCode: 0,
    properties: {
      sessionExpiryInterval: 1234,
      receiveMaximum: 432,
      retainAvailable: true,
      maximumPacketSize: 100,
      assignedClientIdentifier: "test",
      topicAliasMaximum: 456,
      reasonString: "test",
      wildcardSubscriptionAvailable: true,
      sharedSubscriptionAvailable: false,
      serverKeepAlive: 1234,
      responseInformation: "test",
      serverReference: "test",
      authenticationMethod: "test",
      authenticationData: Uint8Array.from([1, 2, 3, 4]),
      userProperty: [
        ["test", "test"],
        ["test", "test"],
      ],
      maximumQos: 2,
      subscriptionIdentifierAvailable: true,
    },
    type: 2,
    protocolLevel: 5,
  },
  Uint8Array.from([
    32,
    100,
    0,
    0,
    97,
    17,
    0,
    0,
    4,
    210,
    33,
    1,
    176,
    36,
    2,
    37,
    1,
    39,
    0,
    0,
    0,
    100,
    18,
    0,
    4,
    116,
    101,
    115,
    116,
    34,
    1,
    200,
    31,
    0,
    4,
    116,
    101,
    115,
    116,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
    40,
    1,
    41,
    1,
    42,
    0,
    19,
    4,
    210,
    26,
    0,
    4,
    116,
    101,
    115,
    116,
    28,
    0,
    4,
    116,
    101,
    115,
    116,
    21,
    0,
    4,
    116,
    101,
    115,
    116,
    22,
    0,
    4,
    1,
    2,
    3,
    4,
  ]),
  { protocolVersion: 5 },
);

testParseGenerate(
  "connack with return code 0 session present bit set",
  { sessionPresent: true, returnCode: 0, type: 2, protocolLevel: 4 },
  Uint8Array.from([32, 2, 1, 0]),
  undefined,
);

testParseGenerate(
  "connack with return code 5",
  { sessionPresent: false, returnCode: 5, type: 2, protocolLevel: 4 },
  Uint8Array.from([32, 2, 0, 5]),
  undefined,
);

testParseError(
  "Invalid header flag bits, must be 0x0 for connack packet",
  Uint8Array.from([33, 2, 0, 5]),
  undefined,
);

testParseError(
  "Invalid connack flags, bits 7-1 must be set to 0",
  Uint8Array.from([32, 2, 2, 5]),
  undefined,
);

testGenerateError("Invalid return code", {
  cmd: "connack",
  retain: false,
  qos: 0,
  dup: false,
  length: 2,
  sessionPresent: false,
  returnCode: "5",
});

testParseGenerate(
  "minimal publish",
  {
    retain: false,
    qos: 0,
    dup: false,
    topic: "test",
    payload: Uint8Array.from([116, 101, 115, 116]),
    type: 3,
    protocolLevel: 4,
    id: undefined,
  },
  Uint8Array.from([48, 10, 0, 4, 116, 101, 115, 116, 116, 101, 115, 116]),
  undefined,
);

testParseGenerate(
  "publish MQTT 5 properties",
  {
    retain: true,
    qos: 2,
    dup: true,
    topic: "test",
    payload: Uint8Array.from([116, 101, 115, 116]),
    properties: {
      payloadFormatIndicator: true,
      messageExpiryInterval: 4321,
      topicAlias: 100,
      responseTopic: "topic",
      correlationData: Uint8Array.from([1, 2, 3, 4]),
      contentType: "test",
      subscriptionIdentifiers: [120],
      userProperty: [
        ["test", "test"],
        ["test", "test"],
        ["test", "test"],
      ],
    },
    type: 3,
    id: 10,
    protocolLevel: 5,
  },
  Uint8Array.from([
    61,
    86,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    10,
    73,
    1,
    1,
    2,
    0,
    0,
    16,
    225,
    35,
    0,
    100,
    8,
    0,
    5,
    116,
    111,
    112,
    105,
    99,
    9,
    0,
    4,
    1,
    2,
    3,
    4,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
    11,
    120,
    3,
    0,
    4,
    116,
    101,
    115,
    116,
    116,
    101,
    115,
    116,
  ]),
  { protocolVersion: 5 },
);

testParseGenerate(
  "publish MQTT 5 with multiple same properties",
  {
    retain: true,
    qos: 2,
    dup: true,
    topic: "test",
    payload: Uint8Array.from([116, 101, 115, 116]),
    properties: {
      payloadFormatIndicator: true,
      messageExpiryInterval: 4321,
      topicAlias: 100,
      responseTopic: "topic",
      correlationData: Uint8Array.from([1, 2, 3, 4]),
      contentType: "test",
      subscriptionIdentifiers: [120, 121, 122],
      userProperty: [["test", "test"]],
    },
    type: 3,
    id: 10,
    protocolLevel: 5,
  },
  Uint8Array.from([
    61,
    64,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    10,
    51,
    1,
    1,
    2,
    0,
    0,
    16,
    225,
    35,
    0,
    100,
    8,
    0,
    5,
    116,
    111,
    112,
    105,
    99,
    9,
    0,
    4,
    1,
    2,
    3,
    4,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
    11,
    120,
    11,
    121,
    11,
    122,
    3,
    0,
    4,
    116,
    101,
    115,
    116,
    116,
    101,
    115,
    116,
  ]),
  { protocolVersion: 5 },
);

testParseGenerate(
  "publish MQTT 5 properties with 0-4 byte varbyte",
  {
    retain: true,
    qos: 2,
    dup: true,
    topic: "test",
    payload: Uint8Array.from([116, 101, 115, 116]),
    properties: {
      payloadFormatIndicator: false,
      subscriptionIdentifiers: [128, 16384, 2097152],
    },
    type: 3,
    id: 10,
    protocolLevel: 5,
  },
  Uint8Array.from([
    61,
    27,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    10,
    14,
    1,
    0,
    11,
    128,
    1,
    11,
    128,
    128,
    1,
    11,
    128,
    128,
    128,
    1,
    116,
    101,
    115,
    116,
  ]),
  { protocolVersion: 5 },
);

testParseGenerate(
  "publish MQTT 5 properties with max value varbyte",
  {
    retain: true,
    qos: 2,
    dup: true,
    topic: "test",
    payload: Uint8Array.from([116, 101, 115, 116]),
    properties: {
      payloadFormatIndicator: false,
      subscriptionIdentifiers: [1, 268435455],
    },
    type: 3,
    id: 10,
    protocolLevel: 5,
  },
  Uint8Array.from([
    61,
    22,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    10,
    9,
    1,
    0,
    11,
    1,
    11,
    255,
    255,
    255,
    127,
    116,
    101,
    115,
    116,
  ]),
  { protocolVersion: 5 },
);

testParseGenerate(
  "maximal publish",
  {
    retain: true,
    qos: 2,
    dup: true,
    topic: "test",
    payload: Uint8Array.from([116, 101, 115, 116]),
    type: 3,
    id: 10,
    protocolLevel: 4,
  },
  Uint8Array.from([
    61,
    12,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    10,
    116,
    101,
    115,
    116,
  ]),
  undefined,
);

testParseGenerate(
  "empty publish",
  {
    retain: false,
    qos: 0,
    dup: false,
    topic: "test",
    payload: Uint8Array.from([]),
    type: 3,
    protocolLevel: 4,
    id: undefined,
  },
  Uint8Array.from([48, 6, 0, 4, 116, 101, 115, 116]),
  undefined,
);

testParseError(
  "Packet must not have both QoS bits set to 1",
  Uint8Array.from([54, 6, 0, 4, 116, 101, 115, 116]),
  undefined,
);

testGenerateError(
  "Invalid subscriptionIdentifier: 268435456",
  {
    cmd: "publish",
    retain: true,
    qos: 2,
    dup: true,
    length: 27,
    topic: "test",
    payload: Uint8Array.from([116, 101, 115, 116]),
    messageId: 10,
    properties: {
      payloadFormatIndicator: false,
      subscriptionIdentifier: 268435456,
    },
  },
  { protocolVersion: 5 },
  "MQTT 5.0 var byte integer >24 bits throws error",
);

testParseGenerate(
  "puback",
  { type: 4, id: 2, protocolLevel: 4 },
  Uint8Array.from([64, 2, 0, 2]),
  undefined,
);

testParseError(
  "Invalid header flag bits, must be 0x0 for puback packet",
  Uint8Array.from([65, 2, 0, 2]),
  undefined,
);

testParseGenerate(
  "puback without reason and no MQTT 5 properties",
  { reasonCode: 0, type: 4, id: 2, protocolLevel: 5 },
  Uint8Array.from([64, 2, 0, 2]),
  { protocolVersion: 5 },
);

testParseGenerate(
  "puback with reason and no MQTT 5 properties",
  {
    reasonCode: 16,
    type: 4,
    id: 2,
    protocolLevel: 5,
    properties: {},
  },
  Uint8Array.from([64, 4, 0, 2, 16, 0]),
  { protocolVersion: 5 },
);

testParseGenerate(
  "puback MQTT 5 properties",
  {
    reasonCode: 16,
    properties: {
      reasonString: "test",
      userProperty: [["test", "test"]],
    },
    type: 4,
    id: 2,
    protocolLevel: 5,
  },
  Uint8Array.from([
    64,
    24,
    0,
    2,
    16,
    20,
    31,
    0,
    4,
    116,
    101,
    115,
    116,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
  ]),
  { protocolVersion: 5 },
);

testParseError(
  "Invalid puback reason code",
  Uint8Array.from([64, 4, 0, 2, 17, 0]),
  { protocolVersion: 5 },
);

testParseGenerate(
  "pubrec",
  { type: 5, id: 2, protocolLevel: 4 },
  Uint8Array.from([80, 2, 0, 2]),
  undefined,
);

testParseError(
  "Invalid header flag bits, must be 0x0 for pubrec packet",
  Uint8Array.from([81, 2, 0, 2]),
  undefined,
);

testParseGenerate(
  "pubrec MQTT 5 properties",
  {
    reasonCode: 16,
    properties: {
      reasonString: "test",
      userProperty: [["test", "test"]],
    },
    type: 5,
    id: 2,
    protocolLevel: 5,
  },
  Uint8Array.from([
    80,
    24,
    0,
    2,
    16,
    20,
    31,
    0,
    4,
    116,
    101,
    115,
    116,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
  ]),
  { protocolVersion: 5 },
);

testParseGenerate(
  "pubrel",
  { type: 6, id: 2, protocolLevel: 4 },
  Uint8Array.from([98, 2, 0, 2]),
  undefined,
);

testParseError(
  "Invalid pubrel reason code",
  Uint8Array.from([98, 4, 0, 2, 17, 0]),
  { protocolVersion: 5 },
);

testParseError(
  "Invalid header flag bits, must be 0x2 for pubrel packet",
  Uint8Array.from([96, 2, 0, 2]),
  undefined,
);

testParseGenerate(
  "pubrel MQTT5 properties",
  {
    reasonCode: 146,
    properties: {
      reasonString: "test",
      userProperty: [["test", "test"]],
    },
    type: 6,
    id: 2,
    protocolLevel: 5,
  },
  Uint8Array.from([
    98,
    24,
    0,
    2,
    146,
    20,
    31,
    0,
    4,
    116,
    101,
    115,
    116,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
  ]),
  { protocolVersion: 5 },
);

testParseError(
  "Invalid pubrel reason code",
  Uint8Array.from([98, 4, 0, 2, 16, 0]),
  { protocolVersion: 5 },
);

testParseGenerate(
  "pubcomp",
  { type: 7, id: 2, protocolLevel: 4 },
  Uint8Array.from([112, 2, 0, 2]),
  undefined,
);

testParseError(
  "Invalid header flag bits, must be 0x0 for pubcomp packet",
  Uint8Array.from([113, 2, 0, 2]),
  undefined,
);

testParseGenerate(
  "pubcomp MQTT 5 properties",
  {
    reasonCode: 146,
    properties: {
      reasonString: "test",
      userProperty: [["test", "test"]],
    },
    type: 7,
    id: 2,
    protocolLevel: 5,
  },
  Uint8Array.from([
    112,
    24,
    0,
    2,
    146,
    20,
    31,
    0,
    4,
    116,
    101,
    115,
    116,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
  ]),
  { protocolVersion: 5 },
);

testParseError(
  "Invalid pubcomp reason code",
  Uint8Array.from([112, 4, 0, 2, 16, 0]),
  { protocolVersion: 5 },
);

testParseError(
  "Invalid header flag bits, must be 0x2 for subscribe packet",
  Uint8Array.from([128, 9, 0, 6, 0, 4, 116, 101, 115, 116, 0]),
  undefined,
);

testParseGenerate(
  "subscribe to one topic",
  {
    subscriptions: [{ qos: 0, topicFilter: "test" }],
    type: 8,
    id: 6,
    protocolLevel: 4,
  },
  Uint8Array.from([130, 9, 0, 6, 0, 4, 116, 101, 115, 116, 0]),
  undefined,
);

testParseError(
  "Invalid subscribe QoS, must be <= 2",
  Uint8Array.from([130, 9, 0, 6, 0, 4, 116, 101, 115, 116, 3]),
  undefined,
);

testParseError(
  "Invalid subscribe topic flag bits, bits 7-6 must be 0",
  Uint8Array.from([130, 10, 0, 6, 0, 0, 4, 116, 101, 115, 116, 128]),
  { protocolVersion: 5 },
);

testParseError(
  "Invalid retain handling, must be <= 2",
  Uint8Array.from([130, 10, 0, 6, 0, 0, 4, 116, 101, 115, 116, 48]),
  { protocolVersion: 5 },
);

testParseError(
  "Invalid subscribe topic flag bits, bits 7-2 must be 0",
  Uint8Array.from([130, 9, 0, 6, 0, 4, 116, 101, 115, 116, 8]),
  undefined,
);

testParseGenerate(
  "subscribe to one topic by MQTT 5",
  {
    subscriptions: [
      {
        qos: 0,
        topicFilter: "test",
        noLocal: false,
        retainHandling: 1,
        retainAsPublished: true,
      },
    ],
    properties: {
      subscriptionIdentifier: 145,
      userProperty: [["test", "test"]],
    },
    type: 8,
    id: 6,
    protocolLevel: 5,
  },
  Uint8Array.from([
    130,
    26,
    0,
    6,
    16,
    11,
    145,
    1,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
    24,
  ]),
  { protocolVersion: 5 },
);

testParseGenerate(
  "subscribe to three topics",
  {
    subscriptions: [
      { qos: 0, topicFilter: "test" },
      {
        qos: 1,
        topicFilter: "uest",
      },
      { qos: 2, topicFilter: "tfst" },
    ],
    type: 8,
    id: 6,
    protocolLevel: 4,
  },
  Uint8Array.from([
    130,
    23,
    0,
    6,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    0,
    4,
    117,
    101,
    115,
    116,
    1,
    0,
    4,
    116,
    102,
    115,
    116,
    2,
  ]),
  undefined,
);

testParseGenerate(
  "subscribe to 3 topics by MQTT 5",
  {
    subscriptions: [
      {
        qos: 0,
        topicFilter: "test",
        noLocal: false,
        retainHandling: 1,
        retainAsPublished: true,
      },
      {
        qos: 1,
        topicFilter: "uest",
        noLocal: false,
        retainHandling: 0,
        retainAsPublished: false,
      },
      {
        qos: 2,
        topicFilter: "tfst",
        noLocal: true,
        retainHandling: 0,
        retainAsPublished: false,
      },
    ],
    properties: {
      subscriptionIdentifier: 145,
      userProperty: [["test", "test"]],
    },
    type: 8,
    id: 6,
    protocolLevel: 5,
  },
  Uint8Array.from([
    130,
    40,
    0,
    6,
    16,
    11,
    145,
    1,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
    24,
    0,
    4,
    117,
    101,
    115,
    116,
    1,
    0,
    4,
    116,
    102,
    115,
    116,
    6,
  ]),
  { protocolVersion: 5 },
);

testParseGenerate(
  "suback",
  { type: 9, id: 6, protocolLevel: 4, returnCodes: [0, 1, 2] },
  Uint8Array.from([144, 5, 0, 6, 0, 1, 2]),
  undefined,
);

testParseGenerate(
  "suback",
  {
    type: 9,
    id: 6,
    protocolLevel: 5,
    properties: {},
    reasonCodes: [0, 1, 2, 128],
  },
  Uint8Array.from([144, 7, 0, 6, 0, 0, 1, 2, 128]),
  { protocolVersion: 5 },
);

testParseError(
  "Invalid suback QoS, must be 0, 1, 2 or 128",
  Uint8Array.from([144, 6, 0, 6, 0, 1, 2, 3]),
  undefined,
);

testParseError(
  "Invalid suback code",
  Uint8Array.from([144, 6, 0, 6, 0, 1, 2, 121]),
  { protocolVersion: 5 },
);

testParseGenerate(
  "suback MQTT 5",
  {
    properties: {
      reasonString: "test",
      userProperty: [["test", "test"]],
    },
    type: 9,
    id: 6,
    protocolLevel: 5,
    reasonCodes: [0, 1, 2, 128],
  },
  Uint8Array.from([
    144,
    27,
    0,
    6,
    20,
    31,
    0,
    4,
    116,
    101,
    115,
    116,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    1,
    2,
    128,
  ]),
  { protocolVersion: 5 },
);

testParseGenerate(
  "unsubscribe",
  { type: 10, id: 7, protocolLevel: 4, topicFilters: ["tfst", "test"] },
  Uint8Array.from([
    162,
    14,
    0,
    7,
    0,
    4,
    116,
    102,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
  ]),
  undefined,
);

testParseError(
  "Invalid header flag bits, must be 0x2 for unsubscribe packet",
  Uint8Array.from([
    160,
    14,
    0,
    7,
    0,
    4,
    116,
    102,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
  ]),
  undefined,
);

testGenerateError(
  "Invalid unsubscriptions",
  {
    cmd: "unsubscribe",
    retain: false,
    qos: 1,
    dup: true,
    length: 5,
    unsubscriptions: 5,
    messageId: 7,
  },
  {},
  "unsubscribe with unsubscriptions not an array",
);

testGenerateError(
  "Invalid unsubscriptions",
  {
    cmd: "unsubscribe",
    retain: false,
    qos: 1,
    dup: true,
    length: 5,
    unsubscriptions: [1, 2],
    messageId: 7,
  },
  {},
  "unsubscribe with unsubscriptions as an object",
);

testParseGenerate(
  "unsubscribe MQTT 5",
  {
    properties: { userProperty: [["test", "test"]] },
    type: 10,
    id: 7,
    protocolLevel: 5,
    topicFilters: ["tfst", "test"],
  },
  Uint8Array.from([
    162,
    28,
    0,
    7,
    13,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    102,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
  ]),
  { protocolVersion: 5 },
);

testParseGenerate(
  "unsuback",
  { type: 11, id: 8, protocolLevel: 4 },
  Uint8Array.from([176, 2, 0, 8]),
  undefined,
);

testParseError(
  "Invalid header flag bits, must be 0x0 for unsuback packet",
  Uint8Array.from([177, 2, 0, 8]),
  undefined,
);

testParseGenerate(
  "unsuback MQTT 5",
  {
    properties: {
      reasonString: "test",
      userProperty: [["test", "test"]],
    },
    type: 11,
    id: 8,
    protocolLevel: 5,
    reasonCodes: [0, 128],
  },
  Uint8Array.from([
    176,
    25,
    0,
    8,
    20,
    31,
    0,
    4,
    116,
    101,
    115,
    116,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    128,
  ]),
  { protocolVersion: 5 },
);

testParseError(
  "Invalid unsuback code",
  Uint8Array.from([176, 4, 0, 8, 0, 132]),
  { protocolVersion: 5 },
);

testParseGenerate(
  "pingreq",
  { type: 12, protocolLevel: 4 },
  Uint8Array.from([192, 0]),
  undefined,
);

testParseError(
  "Invalid header flag bits, must be 0x0 for pingreq packet",
  Uint8Array.from([193, 0]),
  undefined,
);

testParseGenerate(
  "pingresp",
  { type: 13, protocolLevel: 4 },
  Uint8Array.from([208, 0]),
  undefined,
);

testParseError(
  "Invalid header flag bits, must be 0x0 for pingresp packet",
  Uint8Array.from([209, 0]),
  undefined,
);

testParseGenerate(
  "disconnect",
  { type: 14, protocolLevel: 4 },
  Uint8Array.from([224, 0]),
  undefined,
);

testParseError(
  "Invalid header flag bits, must be 0x0 for disconnect packet",
  Uint8Array.from([225, 0]),
  undefined,
);

testParseGenerate(
  "disconnect MQTT 5",
  {
    reasonCode: 0,
    properties: {
      sessionExpiryInterval: 145,
      reasonString: "test",
      serverReference: "test",
      userProperty: [["test", "test"]],
    },
    type: 14,
    protocolLevel: 5,
  },
  Uint8Array.from([
    224,
    34,
    0,
    32,
    17,
    0,
    0,
    0,
    145,
    31,
    0,
    4,
    116,
    101,
    115,
    116,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
    28,
    0,
    4,
    116,
    101,
    115,
    116,
  ]),
  { protocolVersion: 5 },
);

testParseGenerate(
  "disconnect MQTT 5 with no properties",
  { reasonCode: 0, type: 14, protocolLevel: 5 },
  Uint8Array.from([224, 0]),
  { protocolVersion: 5 },
);

testParseError(
  "Invalid disconnect reason code",
  Uint8Array.from([224, 2, 5, 0]),
  { protocolVersion: 5 },
);

testParseGenerate(
  "auth MQTT 5",
  {
    reasonCode: 0,
    properties: {
      authenticationMethod: "test",
      authenticationData: Uint8Array.from([0, 1, 2, 3]),
      reasonString: "test",
      userProperty: [["test", "test"]],
    },
    type: 15,
    protocolLevel: 5,
  },
  Uint8Array.from([
    240,
    36,
    0,
    34,
    21,
    0,
    4,
    116,
    101,
    115,
    116,
    22,
    0,
    4,
    0,
    1,
    2,
    3,
    31,
    0,
    4,
    116,
    101,
    115,
    116,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
  ]),
  { protocolVersion: 5 },
);

testParseError("Invalid auth reason code", Uint8Array.from([240, 2, 23, 0]), {
  protocolVersion: 5,
});

testGenerateError("Invalid protocolId", {
  cmd: "connect",
  retain: false,
  qos: 0,
  dup: false,
  length: 54,
  protocolId: 42,
  protocolVersion: 3,
  will: { retain: true, qos: 2, topic: "topic", payload: "payload" },
  clean: true,
  keepalive: 30,
  clientId: "test",
  username: "username",
  password: "password",
});

testGenerateError("Invalid protocol version", {
  cmd: "connect",
  retain: false,
  qos: 0,
  dup: false,
  length: 54,
  protocolId: "MQIsdp",
  protocolVersion: 1,
  will: { retain: true, qos: 2, topic: "topic", payload: "payload" },
  clean: true,
  keepalive: 30,
  clientId: "test",
  username: "username",
  password: "password",
});

testGenerateError("clientId must be supplied before 3.1.1", {
  cmd: "connect",
  retain: false,
  qos: 0,
  dup: false,
  length: 54,
  protocolId: "MQIsdp",
  protocolVersion: 3,
  will: { retain: true, qos: 2, topic: "topic", payload: "payload" },
  clean: true,
  keepalive: 30,
  username: "username",
  password: "password",
});

testGenerateError("clientId must be given if cleanSession set to 0", {
  cmd: "connect",
  retain: false,
  qos: 0,
  dup: false,
  length: 54,
  protocolId: "MQTT",
  protocolVersion: 4,
  will: { retain: true, qos: 2, topic: "topic", payload: "payload" },
  clean: false,
  keepalive: 30,
  username: "username",
  password: "password",
});

testGenerateError("Invalid keepalive", {
  cmd: "connect",
  retain: false,
  qos: 0,
  dup: false,
  length: 54,
  protocolId: "MQIsdp",
  protocolVersion: 3,
  will: { retain: true, qos: 2, topic: "topic", payload: "payload" },
  clean: true,
  keepalive: "hello",
  clientId: "test",
  username: "username",
  password: "password",
});

testGenerateError("Invalid keepalive", {
  cmd: "connect",
  keepalive: 3.1416,
});

testGenerateError("Invalid will", {
  cmd: "connect",
  retain: false,
  qos: 0,
  dup: false,
  length: 54,
  protocolId: "MQIsdp",
  protocolVersion: 3,
  will: 42,
  clean: true,
  keepalive: 30,
  clientId: "test",
  username: "username",
  password: "password",
});

testGenerateError("Invalid will topic", {
  cmd: "connect",
  retain: false,
  qos: 0,
  dup: false,
  length: 54,
  protocolId: "MQIsdp",
  protocolVersion: 3,
  will: { retain: true, qos: 2, payload: "payload" },
  clean: true,
  keepalive: 30,
  clientId: "test",
  username: "username",
  password: "password",
});

testGenerateError("Invalid will payload", {
  cmd: "connect",
  retain: false,
  qos: 0,
  dup: false,
  length: 54,
  protocolId: "MQIsdp",
  protocolVersion: 3,
  will: { retain: true, qos: 2, topic: "topic", payload: 42 },
  clean: true,
  keepalive: 30,
  clientId: "test",
  username: "username",
  password: "password",
});

testGenerateError("Invalid username", {
  cmd: "connect",
  retain: false,
  qos: 0,
  dup: false,
  length: 54,
  protocolId: "MQIsdp",
  protocolVersion: 3,
  will: { retain: true, qos: 2, topic: "topic", payload: "payload" },
  clean: true,
  keepalive: 30,
  clientId: "test",
  username: 42,
  password: "password",
});

testGenerateError("Invalid password", {
  cmd: "connect",
  retain: false,
  qos: 0,
  dup: false,
  length: 54,
  protocolId: "MQIsdp",
  protocolVersion: 3,
  will: { retain: true, qos: 2, topic: "topic", payload: "payload" },
  clean: true,
  keepalive: 30,
  clientId: "test",
  username: "username",
  password: 42,
});

testGenerateError("Username is required to use password", {
  cmd: "connect",
  retain: false,
  qos: 0,
  dup: false,
  length: 54,
  protocolId: "MQIsdp",
  protocolVersion: 3,
  will: { retain: true, qos: 2, topic: "topic", payload: "payload" },
  clean: true,
  keepalive: 30,
  clientId: "test",
  password: "password",
});

testGenerateError(
  "Invalid messageExpiryInterval: -4321",
  {
    cmd: "publish",
    retain: true,
    qos: 2,
    dup: true,
    length: 60,
    topic: "test",
    payload: Uint8Array.from([116, 101, 115, 116]),
    messageId: 10,
    properties: {
      payloadFormatIndicator: true,
      messageExpiryInterval: -4321,
      topicAlias: 100,
      responseTopic: "topic",
      correlationData: Uint8Array.from([1, 2, 3, 4]),
      userProperties: { test: "test" },
      subscriptionIdentifier: 120,
      contentType: "test",
    },
  },
  { protocolVersion: 5 },
);

testGenerateError(
  "Invalid topicAlias: -100",
  {
    cmd: "publish",
    retain: true,
    qos: 2,
    dup: true,
    length: 60,
    topic: "test",
    payload: Uint8Array.from([116, 101, 115, 116]),
    messageId: 10,
    properties: {
      payloadFormatIndicator: true,
      messageExpiryInterval: 4321,
      topicAlias: -100,
      responseTopic: "topic",
      correlationData: Uint8Array.from([1, 2, 3, 4]),
      userProperties: { test: "test" },
      subscriptionIdentifier: 120,
      contentType: "test",
    },
  },
  { protocolVersion: 5 },
);

testGenerateError(
  "Invalid subscriptionIdentifier: -120",
  {
    cmd: "publish",
    retain: true,
    qos: 2,
    dup: true,
    length: 60,
    topic: "test",
    payload: Uint8Array.from([116, 101, 115, 116]),
    messageId: 10,
    properties: {
      payloadFormatIndicator: true,
      messageExpiryInterval: 4321,
      topicAlias: 100,
      responseTopic: "topic",
      correlationData: Uint8Array.from([1, 2, 3, 4]),
      userProperties: { test: "test" },
      subscriptionIdentifier: -120,
      contentType: "test",
    },
  },
  { protocolVersion: 5 },
);

testParseError(
  "Packet too short",
  Uint8Array.from([16, 9, 0, 6, 77, 81, 73, 115, 100, 112, 3]),
  undefined,
);

testParseError(
  "Invalid protocolId",
  Uint8Array.from([
    16,
    18,
    0,
    6,
    65,
    65,
    65,
    65,
    65,
    65,
    3,
    0,
    0,
    10,
    0,
    4,
    116,
    101,
    115,
    116,
  ]),
  undefined,
);

testParseError(
  "Invalid protocol version",
  Uint8Array.from([
    16,
    18,
    0,
    6,
    77,
    81,
    73,
    115,
    100,
    112,
    1,
    0,
    0,
    10,
    0,
    4,
    116,
    101,
    115,
    116,
  ]),
  undefined,
);

testParseError(
  "Cannot parse protocolId",
  Uint8Array.from([
    16,
    8,
    0,
    15,
    77,
    81,
    73,
    115,
    100,
    112,
    77,
    81,
    73,
    115,
    100,
    112,
    77,
    81,
    73,
    115,
    100,
    112,
    77,
    81,
    73,
    115,
    100,
    112,
    77,
    81,
    73,
    115,
    100,
    112,
    77,
    81,
    73,
    115,
    100,
    112,
    77,
    81,
    73,
    115,
    100,
    112,
    77,
    81,
    73,
    115,
    100,
    112,
  ]),
  undefined,
);

testParseError(
  "Unknown property",
  Uint8Array.from([
    61,
    60,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    10,
    47,
    126,
    1,
    2,
    0,
    0,
    16,
    225,
    35,
    0,
    100,
    8,
    0,
    5,
    116,
    111,
    112,
    105,
    99,
    9,
    0,
    4,
    1,
    2,
    3,
    4,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
    11,
    120,
    3,
    0,
    4,
    116,
    101,
    115,
    116,
    116,
    101,
    115,
    116,
  ]),
  { protocolVersion: 5 },
);

testParseError(
  "Not supported auth packet for this version MQTT",
  Uint8Array.from([
    240,
    36,
    0,
    34,
    21,
    0,
    4,
    116,
    101,
    115,
    116,
    22,
    0,
    4,
    0,
    1,
    2,
    3,
    31,
    0,
    4,
    116,
    101,
    115,
    116,
    38,
    0,
    4,
    116,
    101,
    115,
    116,
    0,
    4,
    116,
    101,
    115,
    116,
  ]),
  undefined,
);

testParseError(
  "Malformed Subscribe Payload",
  Uint8Array.from([
    130,
    14,
    0,
    123,
    0,
    10,
    104,
    105,
    106,
    107,
    108,
    47,
    109,
    110,
    111,
    0,
  ]),
  undefined,
);

testGenerateErrorMultipleCmds(
  [
    "publish",
    "puback",
    "pubrec",
    "pubrel",
    "subscribe",
    "suback",
    "unsubscribe",
    "unsuback",
  ],
  "Invalid messageId",
  { qos: 1, topic: "test", messageId: "a" },
  {},
);
